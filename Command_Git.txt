//Comandos más usados
1. git init: inicializa un nuevo repositorio local
2. git status:  Muestra el estado actual del repositorio
3. git add <nombre>: agrega archivos al staging
4. git add . : agrega todos los archivos al staging
5. git commit : envía los cambios sin un mensaje 
6. git commit -m "mensaje" : crea un nuevo commit con los cambios en el área de preparación
7. git commit -am "mensaje" : solo funciona para archivos que ya le hayamos hecho git add
8. git rm : elimina los archivos pero no su historial
9. git rm --cached <nombre> : elimina los archivos en staging, pero los mantiene en disco duro
10. git rm --force <nombre> : elimina los archivos de git y del disco duro
11. alias <alias>="comando" : asigna un alias a cualquier comando

//Configuración de GIT
1. git config: 
2. git config --list:
3. git config --global user.name "Juan Jimenez"
4. git config --global user.email "jjzea.94@gmail.com"

//Revisión de historial
1. git log <nombre> : muestra la historia del archivo.
2. git log --all --graph : muestra de manera gráfica (tree) el historial del repositorio
3. git log --all --decorate --oneline : muestra de manera gráfica y comprimida el historial del repositorio
4. git log --stat : muestra los cambios específicos del archivo en bytes
5. git show-branch:  muestra las ramas existentes y un poco de su historia.
6. git show-branch --all: muestra las ramas existentes y la historia reciente más detallada del proyecto
7. gitk : nos muestra la historia de nuestro proyecto en un software aparte.

//Administración de ramas y versiones
1. git branch : muestra un litado con todas las ramas del repositorio
2. git branch <nameBranch> : con este comando se crea una nueva rama
3. git checkout <branch> : nos movemos de una rama a otra
4. git checkout CommitID <nombre> : nos regresa a una versión anterior de manera temporal, se pierden los cambios en staging
5. git checkout master <nombre> : nos regresa a la ultima versión de la rama master
6. git reset CommitID --hard : nos regresa a una versión anterior de manera definitiva, se pierden los cambios en staging
7. git reset CommitID --soft : nos regresa a una version anterior de manera definitiva, los cambios en staging se mantienen

//Other
1. git merge <nameBranch>: realiza la fusión entre dos ramas
2. alias <alias>="comando" : asigna un alias a cualquier comando
3. git push origin master

// Cambios en GitHub: master a main
1. git branch -m main
2. git push origin main

// Conexión Git & GitHub
1. Nos movemos al Home
    git config --global user.name "nombre"
    git config --global user.email "email del repo"
    ssh-keygen -t rsa -b 4096 -C "email del repo"
    >>Se nos va a pedir una passphrase y asignamos una. con esto ya quedara creada la llave ssh
2. Agregamos la llave al entorno de trabajo
    eval $(ssh-agent -s)
    >> El anterior comando esta evaluando que el servidor de llaves este corriendo
3. Agregamos la llave a GitHub
    ssh-add ~/.ssh/
    >> Se nos va a pedir la passphrase configurada anteriormente
4. Regresamos a la ubicación del repositorio para agregar un origen remoto de nuestros archivos
    git remote add origin git@github.com:Jzea94/hyperBlock.git
    git remote -v
    >> Nos ayuda a mostrar los origin para hacer fetch y push
    git push origin main --allow-unrelaed-histories
    >> Ayuda a fusionar de manera forzada el repositorio remoto con el local
    git push origin main
    >> Enviamos los cambios del repo local al remoto