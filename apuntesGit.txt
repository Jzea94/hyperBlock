//Comandos básicos
1. git init: inicializa un nuevo repositorio en el directorio actual
2. git clone <URL>: clona un repositorio existente desde una URL remota 
3. git status: Muestra el estado actual del repositorio
4. git add <fileName>: agrega archivos al staging
5. git add . : agrega todos los archivos al staging
6. git commit -m "mensaje" : crea un nuevo commit con los cambios en el área de preparación
7. git commit -am "mensaje" : solo funciona para archivos que ya le hayamos hecho git add
8. git rm : elimina los archivos pero no su historial
9. git rm --cached <nombre> : elimina los archivos en staging, pero los mantiene en disco duro
10. git rm --force <nombre> : elimina los archivos de git y del disco duro
11. alias <alias>="comando" : asigna un alias a cualquier comando

//Configuración de GIT
1. git config: 
2. git config --list:
3. git config --global user.name "Juan Jimenez"
4. git config --global user.email "jjzea.94@gmail.com"
5. git config --global alias.<nameAlias> <commandGit> : de esta manera creamos un alias en memoria
6. git config --global --edit : de esta manera abrimos una interfaz para modificar un alias
7. nano ~/.gitconfig : este comando nos permite crear y modificar alias desde la interfaz nano

//Revisión de historial
1. git log <nombre> : muestra la historia del archivo.
2. git log --all --graph : muestra de manera gráfica (tree) el historial del repositorio
3. git log --all --graph --decorate --oneline : muestra de manera gráfica y comprimida el historial del repositorio
4. git log --stat : muestra los cambios específicos del archivo en bytes
5. git show-branch:  muestra las ramas existentes y un poco de su historia.
6. git show-branch --all: muestra las ramas existentes y la historia reciente más detallada del proyecto
7. gitk : nos muestra la historia de nuestro proyecto en un software aparte.

//Administración de ramas y versiones
1. git branch : muestra un listado con todas las ramas del repositorio
2. git branch <nameBranch> : con este comando se crea una nueva rama
3. git branch -m master main: con este comando renombramos la rama master a main
4. git branch -D <nameBranch> : se fuerza la eliminación de una rama
5. git checkout <branch> : cambia a la rama especificada
6. git checkout CommitID <fileName> : nos regresa a una versión anterior de manera temporal, se pierden los cambios en staging
7. git checkout master <fileName> : nos regresa a la ultima versión de la rama master
8. git checkout -b <newBranch>: crea y cambia a una nueva rama
9. git rebase <branch>: reorganiza los commits en la rama actual sobre la base de la rama especificada.

// Comandos de deshacer
1. git reset <file>: quita un archivo del área de staging
2. git reset --hard <CommitID>: Revierte el último commit y elimina los cambios en el área de staging y el directorio de trabajo.
3. git reset --soft <CommitID>: Revierte el último commit manteniendo los cambios en el área de staging.
4. git revert <commitID>: Crea un nuevo commit que deshace los cambios introducidos por un commit específico.

// Comandos de Tags
1. git tag : muestra la lista de tags creados
2. git tag -a <nameTag> -m "mensaje" <commitID> : crea una etiqueta anotada en un commit específico
3. git tag -d <nameTag> : elimina un tag de manera local
4. git push origin :refs/tags/<nameTag> : elimina un tag en GitHub
5. git show-ref --tags : muestra a que commits apuntan los tags
6. git push origin --tags : envía los tags al repo en GitHub

// Comandos remotos
1. git remote: Lista los repositorios remotos configurados.
2. git remote add <nombre> <URL>: Agrega un nuevo repositorio remoto.
3. git remote add <nombre> <URL>: Agrega un nuevo repositorio remoto con un nombre específico y una URL.
4. git remote remove <nombre>: Elimina un repositorio remoto de tu configuración.
5. git push <repositorio> <rama>: Envía los commits locales al repositorio remoto.
6. git pull <repositorio> <rama>: Obtiene los cambios desde el repositorio remoto y los fusiona en la rama local.
7. git fetch <repositorio>: Obtiene los cambios desde el repositorio remoto, pero no los fusiona.
8. git merge <nameBranch>: realiza la fusión entre dos ramas

// Conexión Git & GitHub
>> configuramos las variables globales
    1. git config --global user.name "nombre"
    2. git config --global user.email "email del repo"
>> creamos la llave ssh usando el protocolo rsa 
    3. ssh-keygen -t rsa -b 4096 -C "email del repo"
>> se nos va a pedir una asignar una passphrase.
>> evaluamos que el servidor de llaves este corriendo.
    4. eval $(ssh-agent -s)
>> agregamos la llave al entorno de trabajo, con esto evitamos usar la passphrase
    5. ssh-add ~/.ssh/
>> regresamos a la ubicación del repositorio para agregar un origen remoto de nuestros archivos
    6. git remote add origin git@github.com:Jzea94/<nameRepositorio>
>> ayuda a mostrar los origin para hacer fetch y push
    7. git remote -v
>> antes de hacer un git push es importante traer los cambios del repositorio remoto al local
    8. git pull origin main
>> estamos preparados para enviar a GitHub los cambios realizados en el repositorio local
    9. git push origin main
>> los siguientes comandos ayudan a fusionar de manera forzada el repositorio remoto con el local
    8. git push origin main --allow-unrelated-histories <branch>
    9. git push origin main --force: 
>> Enviamos los cambios del repositorio local al remoto
